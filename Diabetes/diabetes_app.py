def run_diabetes_app():
    import streamlit as st
    import joblib
    import pandas as pd
    import plotly.graph_objects as go
    from datetime import datetime
    import os

    # ƒê∆∞·ªùng d·∫´n an to√†n
    APP_DIR = os.path.dirname(os.path.abspath(__file__))

    MODEL_PATH = os.path.join(APP_DIR, "model", "diabetes_model.pkl")
    CLASSIFICATION_REPORT_PATH = os.path.join(APP_DIR, "report", "diabetes_classification_report.csv")
    CONFUSION_MATRIX_PATH = os.path.join(APP_DIR, "report", "diabetes_confusion_matrix.jpg")

    # --- 1. Giao di·ªán trang ---
    # st.set_page_config(page_title="Type 2 Diabetes Predictor", layout="wide", page_icon="ü©∫")
    st.markdown(
        "<h1 style='text-align:center; color:#2E86C1;'>ü©∫ D·ª± ƒëo√°n nguy c∆° b·ªánh ti·ªÉu ƒë∆∞·ªùng lo·∫°i 2</h1>", unsafe_allow_html=True)
    st.markdown("---")

    # --- 2. Load m√¥ h√¨nh ---
    model = joblib.load(MODEL_PATH)

    # --- 3. Form nh·∫≠p li·ªáu ng∆∞·ªùi d√πng ---
    st.subheader("üìã Nh·∫≠p th√¥ng tin s·ª©c kh·ªèe:")
    with st.form("input_form"):
        with st.expander("‚Äçüßç**Th√¥ng tin c√° nh√¢n**"):
            col1, col2 = st.columns(2)
            with col1:
                Sex = st.radio("Gi·ªõi t√≠nh (Sex)", ["Nam", "N·ªØ"], help="Gi·ªõi t√≠nh sinh h·ªçc c·ªßa b·∫°n", horizontal=True)
                Education = st.selectbox("Tr√¨nh ƒë·ªô h·ªçc v·∫•n", ["Kh√¥ng ƒëi h·ªçc ho·∫∑c ch·ªâ h·ªçc m·∫´u gi√°o","T·ªët nghi·ªáp l·ªõp 1‚Äì8","T·ªët nghi·ªáp l·ªõp 9‚Äì11","T·ªët nghi·ªáp l·ªõp 12 ho·∫∑c c√≥ ch·ª©ng ch·ªâ t∆∞∆°ng ƒë∆∞∆°ng THPT (GED)","ƒê√£ h·ªçc ƒë·∫°i h·ªçc ho·∫∑c tr∆∞·ªùng ngh·ªÅ, nh∆∞ng ch∆∞a c√≥ b·∫±ng","T·ªët nghi·ªáp ƒë·∫°i h·ªçc"])
            with col2:
                Age = st.selectbox("Tu·ªïi", ["18‚Äì24 tu·ªïi","25‚Äì29 tu·ªïi","30‚Äì34 tu·ªïi","35‚Äì39 tu·ªïi","40‚Äì44 tu·ªïi","45‚Äì49 tu·ªïi","50‚Äì54 tu·ªïi","55‚Äì59 tu·ªïi","60‚Äì64 tu·ªïi","65‚Äì69 tu·ªïi","70‚Äì74 tu·ªïi","75‚Äì79 tu·ªïi","Tr√™n 80 tu·ªïi"])
                Income = st.selectbox("Thu nh·∫≠p", ["D∆∞·ªõi 4 tri·ªáu VNƒê/th√°ng","4‚Äì6 tri·ªáu VNƒê/th√°ng","6‚Äì8 tri·ªáu VNƒê/th√°ng","8‚Äì10 tri·ªáu VNƒê/th√°ng","10‚Äì13 tri·ªáu VNƒê/th√°ng","13‚Äì18 tri·ªáu VNƒê/th√°ng","18‚Äì25 tri·ªáu VNƒê/th√°ng","Tr√™n 25 tri·ªáu VNƒê/th√°ng"])

        with st.expander("‚Äç‚ù§Ô∏è **Ti·ªÅn s·ª≠ b·ªánh & s·ª©c kh·ªèe t·ªïng qu√°t**"):
            col3, col4 = st.columns(2)
            with col3:
                HighBP = st.radio("T·ª´ng ƒë∆∞·ª£c ch·∫©n ƒëo√°n b·ªã huy·∫øt √°p cao?", ["Kh√¥ng", "C√≥"], horizontal=True)
                HighChol = st.radio("T·ª´ng ƒë∆∞·ª£c ch·∫©n ƒëo√°n m·ª©c Cholesterol trong m√°u cao?", ["Kh√¥ng", "C√≥"], horizontal=True)
                HeartDiseaseorAttack = st.radio("T·ª´ng b·ªã b·ªánh tim?", ["Kh√¥ng", "C√≥"], horizontal=True)
                Stroke = st.radio("T·ª´ng b·ªã ƒë·ªôt qu·ªµ?", ["Kh√¥ng", "C√≥"], horizontal=True)
            with col4:
                BMI = st.number_input("Ch·ªâ s·ªë kh·ªëi c∆° th·ªÉ (BMI)", min_value=10, max_value=100, value=25, step=1, help="BMI = C√¢n n·∫∑ng (kg) / (Chi·ªÅu cao (m))¬≤")
                GenHlth = st.selectbox("ƒê√°nh gi√° t·ªïng qu√°t v·ªÅ s·ª©c kh·ªèe", ["R·∫•t t·ªët (Excellent)", "T·ªët (Very good)", "Kh√° (Good)", "K√©m (Fair)", "R·∫•t k√©m (Poor)"])
                PhysHlth = st.number_input("S·ª©c kh·ªèe th·ªÉ ch·∫•t", min_value=0, max_value=30, value=0, step=1, help="S·ªë ng√†y trong 30 ng√†y qua m√† b·∫°n c·∫£m th·∫•y th·ªÉ ch·∫•t kh√¥ng kh·ªèe, nh∆∞ m·ªát m·ªèi, ƒëau nh·ª©c, b·ªánh t·∫≠t...")
                MentHlth = st.number_input("S·ª©c kh·ªèe tinh th·∫ßn", min_value=0, max_value=30, value=0, step=1, help="S·ªë ng√†y trong 30 ng√†y qua m√† b·∫°n c·∫£m th·∫•y t√¢m l√Ω kh√¥ng ·ªïn, lo l·∫Øng, cƒÉng th·∫≥ng, tr·∫ßm c·∫£m...")

        with st.expander("‚ÄçüèÉ‚Äç‚ôÄÔ∏è **H√†nh vi s·ª©c kh·ªèe**"):
            col5, col6 = st.columns(2)
            with col5:
                PhysActivity = st.radio("Ho·∫°t ƒë·ªông th·ªÉ ch·∫•t?", ["Kh√¥ng", "C√≥"], horizontal=True, help="B·∫°n c√≥ **t·∫≠p th·ªÉ d·ª•c/th·ªÉ thao ho·∫∑c ho·∫°t ƒë·ªông th·ªÉ ch·∫•t ngo√†i c√¥ng vi·ªác h·∫±ng ng√†y** trong v√≤ng **30 ng√†y qua**.")
                Smoker = st.radio("C√≥ h√∫t thu·ªëc?", ["Kh√¥ng","C√≥ (hi·ªán t·∫°i ho·∫∑c ƒë√£ t·ª´ng)"], horizontal=True)
                HvyAlcoholConsump = st.radio("U·ªëng r∆∞·ª£u nhi·ªÅu?", ["Kh√¥ng", "C√≥"], horizontal=True,
                                             help=(
                                                "**Ti√™u ch√≠ x√°c ƒë·ªãnh**:\n"
                                                    "- Nam: ‚â• 14 ƒë∆°n v·ªã/tu·∫ßn\n"
                                                    "- N·ªØ: ‚â• 7 ƒë∆°n v·ªã/tu·∫ßn\n"
                                                "\n**M·ªôt 'ƒë∆°n v·ªã' r∆∞·ª£u l√†**:\n"
                                                    "- 1 c·ªëc bia (~355ml)\n"
                                                    "- ho·∫∑c 1 ly r∆∞·ª£u vang (~150ml)\n"                                                
                                                    "- ho·∫∑c 1 shot r∆∞·ª£u m·∫°nh (~44ml)\n")
                                             )
            with col6:
                Fruits = st.radio("ƒÇn tr√°i c√¢y h√†ng ng√†y?", ["Kh√¥ng", "C√≥"], horizontal=True)
                Veggies = st.radio("ƒÇn rau, c·ªß h√†ng ng√†y?", ["Kh√¥ng", "C√≥"], horizontal=True)
                DiffWalk = st.radio("Kh√≥ khƒÉn khi ƒëi l·∫°i?", ["Kh√¥ng", "C√≥"], horizontal=True, help="**G·∫∑p kh√≥ khƒÉn ho·∫∑c kh√¥ng th·ªÉ ƒëi l·∫°i** do v·∫•n ƒë·ªÅ v·ªÅ th·ªÉ ch·∫•t, s·ª©c kh·ªèe ho·∫∑c b·ªánh t·∫≠t.")

        with st.expander("‚Äçüè• **Ti·∫øp c·∫≠n d·ªãch v·ª• y t·∫ø**"):
            col7, col8, col9 = st.columns(3)
            with col7:
                CholCheck = st.radio("ƒê√£ ki·ªÉm tra cholesterol trong 5 nƒÉm qua?", ["Kh√¥ng", "C√≥"])
            with col8:
                NoDocbcCost = st.radio("T·ª´ng kh√¥ng kh√°m v√¨ chi ph√≠?", ["Kh√¥ng", "C√≥"], help="Trong **12 th√°ng qua**, b·∫°n **c·∫ßn g·∫∑p b√°c sƒ© nh∆∞ng ƒë√£ kh√¥ng ƒëi v√¨ l√Ω do chi ph√≠ qu√° cao**.")
            with col9:
                AnyHealthcare = st.radio("C√≥ b·∫£o hi·ªÉm y t·∫ø ho·∫∑c ngu·ªìn thanh to√°n chƒÉm s√≥c s·ª©c kh·ªèe?", ["Kh√¥ng", "C√≥"])

        submitted = st.form_submit_button("üîç **D·ª± ƒëo√°n**")

    # --- 4. D·ª± ƒëo√°n ---
    if submitted:
        # 4_1. Mapping t·ª´ng nh√≥m
        mappings = {
            "Sex": {"N·ªØ": 0, "Nam": 1},
            "Education": {
                "Kh√¥ng ƒëi h·ªçc ho·∫∑c ch·ªâ h·ªçc m·∫´u gi√°o": 1,
                "T·ªët nghi·ªáp l·ªõp 1‚Äì8": 2,
                "T·ªët nghi·ªáp l·ªõp 9‚Äì11": 3,
                "T·ªët nghi·ªáp l·ªõp 12 ho·∫∑c c√≥ ch·ª©ng ch·ªâ t∆∞∆°ng ƒë∆∞∆°ng THPT (GED)": 4,
                "ƒê√£ h·ªçc ƒë·∫°i h·ªçc ho·∫∑c tr∆∞·ªùng ngh·ªÅ, nh∆∞ng ch∆∞a c√≥ b·∫±ng": 5,
                "T·ªët nghi·ªáp ƒë·∫°i h·ªçc": 6
            },
            "Age": {
                "18‚Äì24 tu·ªïi": 1, "25‚Äì29 tu·ªïi": 2, "30‚Äì34 tu·ªïi": 3, "35‚Äì39 tu·ªïi": 4,
                "40‚Äì44 tu·ªïi": 5, "45‚Äì49 tu·ªïi": 6, "50‚Äì54 tu·ªïi": 7, "55‚Äì59 tu·ªïi": 8,
                "60‚Äì64 tu·ªïi": 9, "65‚Äì69 tu·ªïi": 10, "70‚Äì74 tu·ªïi": 11,
                "75‚Äì79 tu·ªïi": 12, "Tr√™n 80 tu·ªïi": 13
            },
            "Income": {
                "D∆∞·ªõi 4 tri·ªáu VNƒê/th√°ng": 1, "4‚Äì6 tri·ªáu VNƒê/th√°ng": 2, "6‚Äì8 tri·ªáu VNƒê/th√°ng": 3,
                "8‚Äì10 tri·ªáu VNƒê/th√°ng": 4, "10‚Äì13 tri·ªáu VNƒê/th√°ng": 5, "13‚Äì18 tri·ªáu VNƒê/th√°ng": 6,
                "18‚Äì25 tri·ªáu VNƒê/th√°ng": 7, "Tr√™n 25 tri·ªáu VNƒê/th√°ng": 8
            },
            "GenHlth": {"R·∫•t t·ªët (Excellent)": 1, "T·ªët (Very good)": 2, "Kh√° (Good)": 3,
                        "K√©m (Fair)": 4, "R·∫•t k√©m (Poor)": 5},
            # √Åp d·ª•ng cho nh√≥m C√≥/Kh√¥ng
            "binary": {"Kh√¥ng": 0, "C√≥": 1, "C√≥ (hi·ªán t·∫°i ho·∫∑c ƒë√£ t·ª´ng)": 1}
        }

        # 4_2. T·∫°o dictionary cho d·ªØ li·ªáu ƒë·∫ßu v√†o
        input_data = {
            "HighBP": mappings["binary"][HighBP],
            "HighChol": mappings["binary"][HighChol],
            "CholCheck": mappings["binary"][CholCheck],
            "BMI": BMI,
            "Smoker": mappings["binary"][Smoker],
            "Stroke": mappings["binary"][Stroke],
            "HeartDiseaseorAttack": mappings["binary"][HeartDiseaseorAttack],
            "PhysActivity": mappings["binary"][PhysActivity],
            "Fruits": mappings["binary"][Fruits],
            "Veggies": mappings["binary"][Veggies],
            "HvyAlcoholConsump": mappings["binary"][HvyAlcoholConsump],
            "AnyHealthcare": mappings["binary"][AnyHealthcare],
            "NoDocbcCost": mappings["binary"][NoDocbcCost],
            "GenHlth": mappings["GenHlth"][GenHlth],
            "MentHlth": MentHlth,
            "PhysHlth": PhysHlth,
            "DiffWalk": mappings["binary"][DiffWalk],
            "Sex": mappings["Sex"][Sex],
            "Age": mappings["Age"][Age],
            "Education": mappings["Education"][Education],
            "Income": mappings["Income"][Income]
        }
        input_df = pd.DataFrame([input_data])

        # 4_3. D·ª± ƒëo√°n x√°c su·∫•t
        proba = model.predict_proba(input_df)[0][1]

        # --- 5. Gauge hi·ªÉn th·ªã ph·∫ßn trƒÉm nguy c∆° ---
        st.markdown("<br>", unsafe_allow_html=True)
        st.subheader("üìà K·∫øt qu·∫£ d·ª± ƒëo√°n:")
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=round(proba * 100, 2),
            title={'text': "Nguy c∆° m·∫Øc b·ªánh ti·ªÉu ƒë∆∞·ªùng (%)"},
            gauge={
                'axis': {'range': [0, 100]},
                'steps': [
                    {'range': [0, 40], 'color': "lightgreen"},
                    {'range': [40, 70], 'color': "yellow"},
                    {'range': [70, 100], 'color': "red"}
                ],
                'bar': {'color': "crimson"}
            }
        ))
        st.plotly_chart(fig, use_container_width=True)

        # --- 6. Hi·ªÉn th·ªã k·∫øt qu·∫£ ---
        if proba < 0.4:
            result = "‚úÖ Nguy c∆° TH·∫§P m·∫Øc b·ªánh ti·ªÉu ƒë∆∞·ªùng"
            st.success(f"{result} ({proba * 100:.2f}%)")
        elif proba < 0.7:
            result = "‚ö†Ô∏è Nguy c∆° TRUNG B√åNH m·∫Øc b·ªánh ti·ªÉu ƒë∆∞·ªùng"
            st.warning(f"{result} ({proba * 100:.2f}%)")
        else:
            result = "‚ùó Nguy c∆° CAO m·∫Øc b·ªánh ti·ªÉu ƒë∆∞·ªùng"
            st.error(f"{result} ({proba * 100:.2f}%)")

        # --- 7. L·ªãch s·ª≠ d·ª± ƒëo√°n ---
        # 7_1. Kh·ªüi t·∫°o session_state n·∫øu ch∆∞a c√≥
        if "diabetes_history" not in st.session_state:
            st.session_state["diabetes_history"] = []

        # 7_2. N·∫øu form ƒë√£ submit, th√™m d√≤ng m·ªõi v√†o l·ªãch s·ª≠
        record = {
            "üïí Th·ªùi gian": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "üìà X√°c su·∫•t (%)": round(proba * 100, 2),
            "üë§ Gi·ªõi t√≠nh": Sex,
            "üëµ Tu·ªïi": Age,
            "üéì Tr√¨nh ƒë·ªô h·ªçc v·∫•n": Education,
            "üí∞ Thu nh·∫≠p": Income,
            "üíì Huy·∫øt √°p cao": HighBP,
            "üß¨ M·ª° m√°u cao": HighChol,
            "‚ù§Ô∏è B·ªánh tim": HeartDiseaseorAttack,
            "üß† ƒê·ªôt qu·ªµ": Stroke,
            "‚öñÔ∏è BMI": BMI,
            "ü©∫ S·ª©c kh·ªèe t·ªïng qu√°t": GenHlth,
            "ü§í Ng√†y th·ªÉ ch·∫•t kh√¥ng kh·ªèe": PhysHlth,
            "üòü Ng√†y t√¢m l√Ω kh√¥ng ·ªïn": MentHlth,
            "üèÉ Ho·∫°t ƒë·ªông th·ªÉ ch·∫•t": PhysActivity,
            "üö¨ H√∫t thu·ªëc": Smoker,
            "üç∫ U·ªëng r∆∞·ª£u nhi·ªÅu": HvyAlcoholConsump,
            "üçé ƒÇn tr√°i c√¢y": Fruits,
            "ü•¶ ƒÇn rau c·ªß": Veggies,
            "üö∂‚Äç‚ôÇÔ∏è Kh√≥ khƒÉn ƒëi l·∫°i": DiffWalk,
            "üß™ ƒê√£ ki·ªÉm tra Cholesterol": CholCheck,
            "üí∏ Kh√¥ng ƒëi kh√°m v√¨ chi ph√≠": NoDocbcCost,
            "üè• C√≥ b·∫£o hi·ªÉm y t·∫ø": AnyHealthcare
        }
        st.session_state["diabetes_history"].append(record)

        # 7_3. Hi·ªÉn th·ªã l·ªãch s·ª≠ d·ª± ƒëo√°n (g·ªìm c·∫£ b·∫£n m·ªõi nh·∫•t)
        if st.session_state["diabetes_history"]:
            st.markdown("<br>", unsafe_allow_html=True)
            st.subheader("üìú L·ªãch s·ª≠ d·ª± ƒëo√°n")
            df_history = pd.DataFrame(st.session_state["diabetes_history"])

            # T√¥ ƒë·∫≠m d√≤ng cu·ªëi (m·ªõi nh·∫•t)
            def highlight_last(s):
                return ['background-color: #e0f7fa' if i == len(s) - 1 else '' for i in range(len(s))]

            st.dataframe(
                df_history.style.apply(highlight_last, axis=0),
                use_container_width=True
            )

        # --- 8. ƒê√°nh gi√° hi·ªáu su·∫•t m√¥ h√¨nh ---
        st.markdown("<br>", unsafe_allow_html=True)
        st.subheader("üöÄ Hi·ªáu su·∫•t m√¥ h√¨nh")

        # 8_1. Confusion Matrix
        with st.expander("üìä **Confusion Matrix**"):
            col1, col2 = st.columns(2)
            with col1:
                st.image(CONFUSION_MATRIX_PATH)
            with col2:
                st.markdown("""
                    <h5>üìã Di·ªÖn gi·∫£i k·∫øt qu·∫£:</h5>
                    <ul>
                      <li>‚úÖ D·ª± ƒëo√°n ƒë√∫ng ng∆∞·ªùi KH√îNG m·∫Øc b·ªánh: <b>5.049 ng∆∞·ªùi</b>
                      <li>üßç D·ª± ƒëo√°n ƒë√∫ng ng∆∞·ªùi C√ì b·ªánh: <b>5.659 ng∆∞·ªùi</b>
                      <li>‚ö†Ô∏è D·ª± ƒëo√°n nh·∫ßm ng∆∞·ªùi kh·ªèe l√† c√≥ b·ªánh: <b>2.041 ng∆∞·ªùi</b>
                      <li>‚ùå B·ªè s√≥t ng∆∞·ªùi b·ªánh (d·ª± ƒëo√°n l√† kh·ªèe): <b>1.390 ng∆∞·ªùi</b>
                    </ul>
    
                    <h5>üß† K·∫øt lu·∫≠n:</h5>
                    <ul>
                        <li>üìà T·ªïng s·ªë d·ª± ƒëo√°n ƒë√∫ng: <b>10.708 / 14.139 ‚Üí ~76% ch√≠nh x√°c</b>
                        <li>üîç M√¥ h√¨nh <b>ph√°t hi·ªán kh√° t·ªët ng∆∞·ªùi b·ªánh</b>, gi√∫p c·∫£nh b√°o s·ªõm nguy c∆°.
                        <li>üë©‚Äç‚öïÔ∏è Tuy nhi√™n, v·∫´n c√≥ sai s√≥t n√™n <b>ng∆∞·ªùi d√πng n√™n ƒëi kh√°m ƒë·ªÉ x√°c nh·∫≠n</b> n·∫øu k·∫øt qu·∫£ l√† <b>‚Äúnguy c∆° cao‚Äù</b>.
                    </ul>
                    """, unsafe_allow_html=True)

        # 8_2. Classification Report
        with st.expander("üìã **Classification Report**"):
            # ƒê·ªçc d·ªØ li·ªáu t·ª´ file CSV
            report_df = pd.read_csv(CLASSIFICATION_REPORT_PATH, index_col=0)
            report_df.rename(index={
                "0.0": "Kh√¥ng m·∫Øc b·ªánh (Class 0)",
                "1.0": "C√≥ b·ªánh (Class 1)",
                "accuracy": "ƒê·ªô ch√≠nh x√°c (Accuracy)",
                "macro avg": "Trung b√¨nh c·ªông (Macro Avg)",
                "weighted avg": "Trung b√¨nh c√≥ tr·ªçng s·ªë (Weighted Avg)"
            }, inplace=True)

            # ƒê·ªãnh d·∫°ng b·∫£ng ƒë·∫πp
            styled_df = report_df.style.format("{:.2f}").set_properties(**{
                'text-align': 'center'
            }).set_table_styles([
                {"selector": "th", "props": [("text-align", "center")]}
            ])

            # Hi·ªÉn th·ªã b·∫£ng
            st.dataframe(styled_df, use_container_width=True)

            # Ph√¢n t√≠ch d·ªÖ hi·ªÉu
            st.markdown("""
                <h5>üìä Ph√¢n t√≠ch chi ti·∫øt:</h5>
                <ul>
                    <li>üë§ <b>Kh√¥ng m·∫Øc b·ªánh (Class 0):</b>
                    <ul>
                        <li>üìè Precision: {:.0f}% ‚Üí Trong s·ªë d·ª± ƒëo√°n l√† <i>kh√¥ng m·∫Øc b·ªánh</i>, c√≥ {:.0f}% l√† ƒë√∫ng.
                        <li>üéØ Recall: {:.0f}% ‚Üí Trong s·ªë <i>th·ª±c s·ª± kh√¥ng m·∫Øc b·ªánh</i>, m√¥ h√¨nh ph√°t hi·ªán ƒë√∫ng {:.0f}%.
                    </ul>
                    <li>‚ù§Ô∏è <b>C√≥ b·ªánh (Class 1):</b>
                    <ul>
                        <li>üìè Precision: {:.0f}% ‚Üí Trong s·ªë d·ª± ƒëo√°n l√† <i>c√≥ b·ªánh</i>, c√≥ {:.0f}% l√† ƒë√∫ng.
                        <li>üéØ Recall: {:.0f}% ‚Üí Trong s·ªë <i>th·ª±c s·ª± m·∫Øc b·ªánh</i>, m√¥ h√¨nh ph√°t hi·ªán ƒë√∫ng {:.0f}%.
                    </ul>
                </ul>
                <h5>üìà T·ªïng th·ªÉ:</h5>
                <ul>
                    <li>‚úÖ Accuracy (ƒë·ªô ch√≠nh x√°c t·ªïng th·ªÉ): {:.0f}%
                    <li>‚öñÔ∏è M√¥ h√¨nh c√≥ ƒë·ªô c√¢n b·∫±ng t·ªët (F1-score trung b√¨nh ‚âà {:.0f}%)
                    <li>üîç ∆Øu ti√™n ph√°t hi·ªán ƒë√∫ng ng∆∞·ªùi c√≥ b·ªánh h∆°n ‚Üí ph√π h·ª£p cho m·ª•c ti√™u s√†ng l·ªçc nguy c∆°.
                </ul>
                """.format(
                report_df.loc["Kh√¥ng m·∫Øc b·ªánh (Class 0)", "precision"] * 100,
                report_df.loc["Kh√¥ng m·∫Øc b·ªánh (Class 0)", "precision"] * 100,
                report_df.loc["Kh√¥ng m·∫Øc b·ªánh (Class 0)", "recall"] * 100,
                report_df.loc["Kh√¥ng m·∫Øc b·ªánh (Class 0)", "recall"] * 100,

                report_df.loc["C√≥ b·ªánh (Class 1)", "precision"] * 100,
                report_df.loc["C√≥ b·ªánh (Class 1)", "precision"] * 100,
                report_df.loc["C√≥ b·ªánh (Class 1)", "recall"] * 100,
                report_df.loc["C√≥ b·ªánh (Class 1)", "recall"] * 100,

                report_df.loc["ƒê·ªô ch√≠nh x√°c (Accuracy)", "precision"] * 100,
                report_df.loc["Trung b√¨nh c·ªông (Macro Avg)", "f1-score"] * 100
            ), unsafe_allow_html=True)

        # --- 9. Th√¥ng tin th√™m ---
        st.markdown("<br>", unsafe_allow_html=True)
        st.subheader("üìò Th√¥ng tin th√™m")
        with st.expander("üìñ **Xem chi ti·∫øt**"):
            st.markdown("""
            <div style='font-size: 16px; line-height: 1.7; color: #333;'>
    
            <h5>üß† V·ªÅ ·ª©ng d·ª•ng n√†y</h5> 
            <p>·ª®ng d·ª•ng gi√∫p b·∫°n <b>∆∞·ªõc l∆∞·ª£ng nguy c∆° m·∫Øc b·ªánh ti·ªÉu ƒë∆∞·ªùng lo·∫°i 2</b> d·ª±a tr√™n th√¥ng tin s·ª©c kh·ªèe c√° nh√¢n b·∫°n cung c·∫•p.</p>
            <p>K·∫øt qu·∫£ l√† <b>m·ªôt t·ªâ l·ªá ph·∫ßn trƒÉm (%)</b> ‚Äî c√†ng cao th√¨ nguy c∆° m·∫Øc b·ªánh c√†ng l·ªõn.</p>
    
            <div style="background-color: #fff8e1; padding: 10px; border-left: 5px solid #f39c12; margin-top:10px;">
            ‚ö†Ô∏è <b>L∆∞u √Ω:</b> ·ª®ng d·ª•ng ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o, kh√¥ng thay th·∫ø cho vi·ªác kh√°m ho·∫∑c ch·∫©n ƒëo√°n b·ªüi b√°c sƒ©.
            </div>
    
            <hr>
    
            <h5>üìö B·ªô d·ªØ li·ªáu</h5>
            <ul>
                <li>üåê B·ªô d·ªØ li·ªáu m√¥ h√¨nh s·ª≠ d·ª•ng tr√™n n·ªÅn t·∫£ng Kaggle: 
                    <a href="https://www.kaggle.com/datasets/alexteboul/diabetes-health-indicators-dataset" target="_blank"><b>Xem t·∫°i ƒë√¢y</b></a>.</li>
                <li>üìä D·ªØ li·ªáu s·ª≠ d·ª•ng l√† t·ª´ file <b>diabetes_binary_5050split_health_indicators_BRFSS2015.csv</b> trong b·ªô d·ªØ li·ªáu n√†y.</li>
                <li>üîç D·ªØ li·ªáu ƒë∆∞·ª£c thu th·∫≠p t·ª´ kh·∫£o s√°t <b>BRFSS 2015</b> ‚Äì ch∆∞∆°ng tr√¨nh gi√°m s√°t c√°c y·∫øu t·ªë r·ªßi ro h√†nh vi qua ƒëi·ªán tho·∫°i do <b>Trung t√¢m Ki·ªÉm so√°t v√† Ph√≤ng ng·ª´a D·ªãch b·ªánh Hoa K·ª≥ (CDC)</b> th·ª±c hi·ªán.</li>
                <div style="background-color: #f0f9ff; padding: 12px; border-left: 5px solid #3498db; border-radius: 5px; margin-top: 10px;">
                üí± <b>Ch√∫ th√≠ch:</b> Bi·∫øn d·ªØ li·ªáu <b>thu nh·∫≠p</b> ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh theo <b>s·ª©c mua t∆∞∆°ng ƒë∆∞∆°ng (Purchasing Power Parity - PPP)</b> tr√™n form nh·∫≠p li·ªáu tr√™n ƒë·ªÉ ph·∫£n √°nh m·ª©c s·ªëng t·∫°i Vi·ªát Nam. Vi·ªác chu·∫©n h√≥a n√†y gi√∫p m√¥ h√¨nh d·ª± ƒëo√°n ch√≠nh x√°c h∆°n trong b·ªëi c·∫£nh kinh t·∫ø ‚Äì x√£ h·ªôi ƒë·ªãa ph∆∞∆°ng.
                </div>
            </ul>
    
            <hr>
    
            <h5>‚öôÔ∏è ·ª®ng d·ª•ng ho·∫°t ƒë·ªông th·∫ø n√†o?</h5>
            <ol>
                <li>B·∫°n nh·∫≠p c√°c th√¥ng tin v·ªÅ tu·ªïi, ch·ªâ s·ªë c∆° th·ªÉ, h√†nh vi s·ª©c kh·ªèe,...</li>
                <li>M√¥ h√¨nh <b>XGBClassifier</b> ƒë∆∞·ª£c hu·∫•n luy·ªán v·ªõi <b>b·ªô d·ªØ li·ªáu</b> s·∫Ω ph√¢n t√≠ch v√† d·ª± ƒëo√°n nguy c∆°.</li>
                <li>Hi·ªÉn th·ªã k·∫øt qu·∫£ b·∫±ng m√†u s·∫Øc v√† ph·∫ßn trƒÉm d·ªÖ hi·ªÉu.</li>
            </ol>
    
            <hr>
    
            <h5>üéØ M·ª•c ti√™u</h5>
            <p>Gi√∫p b·∫°n <b>nh·∫≠n bi·∫øt nguy c∆° s·ªõm h∆°n</b>, t·ª´ ƒë√≥:</p>
            <ul>
                <li>üßò‚Äç‚ôÇÔ∏è Ch·ªß ƒë·ªông thay ƒë·ªïi l·ªëi s·ªëng</li>
                <li>üè• TƒÉng c∆∞·ªùng kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥</li>
                <li>üõ°Ô∏è G√≥p ph·∫ßn ph√≤ng ng·ª´a b·ªánh ti·ªÉu ƒë∆∞·ªùng m·ªôt c√°ch hi·ªáu qu·∫£</li>
            </ul>
    
            </div>
            """, unsafe_allow_html=True)


